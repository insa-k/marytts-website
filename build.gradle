plugins {
    id 'org.jbake.site' version '1.0.0'
}

ext {
    pageTitles = [
            "documentation/history.md"          : "History",
            "download/index.md"                 : "Download",
            "download/releasenotes-3.0.0.md"    : "Release Notes",
            "download/releasenotes-3.0.1.md"    : "Release Notes",
            "download/releasenotes-3.0.2.md"    : "Release Notes",
            "download/releasenotes-3.0.3.md"    : "Release Notes",
            "download/releasenotes-3.1-beta1.md": "Release Notes",
            "download/releasenotes-3.1-beta2.md": "Release Notes",
            "download/releasenotes-3.1.0.md"    : "Release Notes",
            "download/releasenotes-3.5.0.md"    : "Release Notes",
            "download/releasenotes-3.6.0.md"    : "Release Notes",
            "download/releasenotes-4.0-beta.md" : "Release Notes",
            "download/releasenotes-4.0.0.md"    : "Release Notes",
            "download/releasenotes-4.1.0.md"    : "Release Notes",
            "download/releasenotes-4.1.1.md"    : "Release Notes",
            "download/releasenotes-4.2.0.md"    : "Release Notes",
            "download/releasenotes-4.3.0.md"    : "Release Notes",
            "download/releasenotes-4.3.1.md"    : "Release Notes",
            "download/releasenotes-5.0.md"      : "Release Notes",
            "download/releasenotes-5.1.1.md"    : "Release Notes",
            "download/releasenotes-5.1.2.md"    : "Release Notes",
            "download/releasenotes-5.1.md"      : "Release Notes",
            "download/releasenotes-5.2.md"      : "Release Notes",
            "index.md"                          : "MaryTTS",
            untitled                            : 'No Title'
    ]
}

repositories {
    ['cloudark', 'localhost'].each { host ->
        maven {
            url "http://$host:8081/artifactory/local/"
            credentials {
                username findProperty('cloudarkUser')
                password findProperty('cloudarkApiKey')
            }
        }
    }
}

configurations {
    javadoc
}

dependencies {
    javadoc group: 'de.dfki.mary', name: 'marytts', version: '5.2', classifier: 'javadoc'
}

jbake {
    srcDirName = relativePath("$buildDir/generatedContent")
    destDirName = 'site'
    configuration['render.feed'] = false
}

task generatePageTitles(type: GeneratePageTitles) {
    destDir = file("$buildDir/generatedPageTitles")
}

task processMarkdown(type: Copy) {
    dependsOn generatePageTitles
    into "$buildDir/generatedContent/content"
    from 'src/site/markdown', {
        include '**/*.md'
        eachFile {
            def headerFile = file("$generatePageTitles.destDir/${it.path}.txt")
            headerFile = headerFile.exists() ? headerFile : file("$generatePageTitles.destDir/untitled.txt")
            filter org.apache.tools.ant.filters.ConcatFilter, prepend: headerFile
        }
    }
    from 'src/site/markdown', {
        include '**/*.md.vm'
        rename { it - '.vm' }
        expand project.properties
        eachFile {
            def headerFile = file("$generatePageTitles.destDir/${it.path}.txt")
            headerFile = headerFile.exists() ? headerFile : file("$generatePageTitles.destDir/untitled.txt")
            filter org.apache.tools.ant.filters.ConcatFilter, prepend: headerFile
        }
    }
}

task processAssets(type: Copy) {
    from 'src/site/assets'
    into "$buildDir/generatedContent/assets"
    from configurations.javadoc, {
        filesMatching '*.jar', { jarFileDetails ->
            copy {
                from zipTree(jarFileDetails.file)
                into "$destinationDir/javadoc"
            }
            jarFileDetails.exclude()
        }
    }
}

task processTemplates(type: Copy) {
    from 'src/site/templates'
    into "$buildDir/generatedContent/templates"
}

bake {
    dependsOn processMarkdown, processAssets, processTemplates
}

assemble {
    dependsOn bake
}

class GeneratePageTitles extends DefaultTask {

    @OutputDirectory
    File destDir

    @TaskAction
    void generate() {
        project.pageTitles.each { mdFile, title ->
            def destPath = project.file("$destDir/$mdFile")
            destPath.parentFile.mkdirs()
            project.file("${destPath}.txt").withWriter { writer ->
                writer.println "title=$title"
                writer.println "type=page"
                writer.println "status=published"
                writer.println "~~~~~~"
            }
        }
    }
}
